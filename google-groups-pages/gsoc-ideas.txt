<h1>gsoc-ideas</h1>
<p style="text-align: center; clear: both;"><a style="border: 0pt none; background-color: transparent; margin-left: 1em; margin-right: 1em;" href="../web/metalink_newlogo.png"><img src="metalink-discussionmetalink_newlogo.png" style="border: 0pt none;"></a></p><p>&nbsp;</p><p>Metalink is useful to Free and Open Source
software. It was designed for community projects that use multiple
mirrors and P2P. There is a whole ecosystem of applications, sites, and projects involved in Metalink.<br></p><p>&nbsp;</p><p>We invite other Download Managers, Web browsers,
BitTorrent clients, and other P2P programs to support Metalink.</p><p><br></p><p>If
you're a developer, adding Metalink support to Open Source programs and
getting projects to use it for their downloads will be a huge help.
Examining the source code from current open source Metalink clients and
generators could be useful.</p><p>&nbsp;</p><p>Current open source Metalink clients (downloaders)&nbsp;</p><ul><li> <a href="http://www.nabber.org/projects/appupdater/">Appupdater</a> (Cross Platform, Python).</li><li><a href="http://aria2.sourceforge.net/">aria2</a>
(Cross Platform, C++) *.<br></li><li> <a href="http://www.downthemall.net/">DownThemAll!</a>
(Cross Platform Firefox Extension, Javascript).</li><li><a href="http://www.nabber.org/projects/dlapplet/">DLApplet</a> (Cross Platform Browser Applet, Java).<br></li><li>easyMule (Windows, C++).<br></li><li><a href="http://www.freedownloadmanager.org/">Free Download Manager</a> (Windows, C++).</li><li><span style="color: rgb(255, 0, 0);"></span><a href="http://live.gnome.org/GGet">GGet</a> (Cross Platform, Python) * uses Metalink Checker.<br></li><li><a href="http://www.kde.org/">KGet</a> (Cross Platform, C++) *?.<br></li><li><a href="https://launchpad.net/libmetalink">libmetalink</a> (C library).</li><li> <a href="http://hampus.vox.nu/metadl/">Metadl</a> (Windows, C++).</li><li> <a href="http://metalinks.svn.sourceforge.net/viewvc/metalinks/checker/metalink.py?view=markup">Metalink Checker</a>
(Cross Platform, Python) *. It can also be used as a
library as it is in <span style="color: rgb(255, 0, 0);"><a href="http://live.gnome.org/GGet">GGet<br></a></span></li><li><a href="http://metalinks.svn.sourceforge.net/viewvc/metalinks/mini_downloader/?sortby=log">Mini Downloader</a> (Windows, C++).</li><li><a href="http://mulk.sourceforge.net/">mulk</a> (Unix, C) uses libmetalink and libcurl.<br></li><li><a href="http://www.phex.org/mambo/">Phex</a> (Cross Platform, Java).</li><li> <a href="http://dfast.sourceforge.net/">wxDownload Fast</a> (Cross Platform, C++).</li><li><a href="https://launchpad.net/wubi">Wubi</a> (Python, previously C++).<br></li><li><a href="http://yum.baseurl.org/">yum</a> (Python).<br></li></ul><p style="text-align: center; clear: both;"><a style="border: 0pt none; background-color: transparent; margin-left: 1em; margin-right: 1em;" href="../web/dta_ubuntu.png"><img src="metalink-discussiondta_ubuntu.png?display=thumb&amp;width=420&amp;height=420" style="border: 0pt none;"></a></p><p>&nbsp;</p><p>Current open source Metalink generators:</p><ul><li><a href="http://mirrorbrain.org/">MirrorBrain </a>(C, Python, Perl) *.<br></li><li><a href="https://hosted.fedoraproject.org/mirrormanager/">MirrorManager</a> (Python).<br></li><li> <a href="http://hampus.vox.nu/metalink/">Metalink Editor</a>
(Cross Platform, GUI, Python) *.<br></li><li> <a href="http://metalinks.sourceforge.net/">Metalink tools</a> (Unix/Windows, C++).</li><li> <a href="http://code.google.com/p/metalink-library/">Metalink Library for PHP and Python (metalink-library)</a>
(Cross Platform, PHP, Python).<br></li><li> <a href="http://sourceforge.net/projects/geomcfly">Geo McFly</a> (Unix/Windows, Python).</li><li> <a href="http://simba.packages.ro/">Simba</a> (Unix, Perl).</li><li> <a href="http://metalink.packages.ro/">RoPkg::Metalink / Metalink @ Packages Resources</a> (Unix, Perl). </li><li> <a href="http://curl.haxx.se/download.html">cURL</a> (Perl).</li></ul>* means that it's been updated to support Metalink 4.0 format.<br><p>&nbsp;</p><p><font size="6">Ideas:</font></p><p>&nbsp;</p><p>We didn't get accepted for GSoC 10,
but these ideas could be good starting points for newcomers. They could also be used for GSoC for other projects. Please
familiarize yourself with our project and software, and come up with
ideas of your own. Please join our <a href="../../metalink-discussion">discussion list</a> and post about your ideas! Certain programs that don't yet support Metalink 4.0 could be updated. For smaller, bite sized projects see <a href="https://sourceforge.net/apps/trac/metalinks/report/1">active tickets</a>.<br></p><p><br></p><br><p><span style="font-weight: bold;">Native Google Chrome support.<br></span></p><p><i>Bounty: $300 <br></i></p><p><i>Importance</i>: <span style="color: rgb(255, 0, 0);">High. </span><b><br></b></p><p><i>Difficulty:</i> Easy to Medium? <br></p><p><i>Skills:</i> C++ coding.</p><p><i>Bonus:</i> Familiarity with <a href="http://xmlsoft.org/">libxml2</a>, which Chrome already depends on. It uses NSS for checksums.<br></p><i>Details:</i> <a href="http://code.google.com/p/chromium/issues/detail?id=1751">Feature request</a>. Chromium <a href="http://src.chromium.org/viewvc/chrome/trunk/src/chrome/browser/">code</a>. There's also <a href="https://launchpad.net/libmetalink">libmetalink</a>. Thread on <a href="../../chromium-dev/browse_thread/thread/65340f87bb2696cb#">chromium-dev</a>.<p style="margin: 0px;"><br><span style="border-collapse: collapse; white-space: pre-wrap;"></span></p><p style="margin: 0px;"><b><span style="border-collapse: collapse; white-space: pre-wrap;">Google Code, SourceForge, and Lauchpad support for Metalink</span></b></p><p><i>Importance</i>: <span style="color: rgb(255, 0, 0);">High. </span><b><br></b></p><p><i>Difficulty:</i> Easy to Medium? <br></p><p><i>Skills:</i> More advocacy than coding?<br></p><i>Details:</i> <a href="http://code.google.com/">Google Code</a>, <a href="https://sourceforge.net/">SourceForge</a>, and <a href="https://launchpad.net/">Launchpad</a> all serve up files for many open source projects. Some use mirrors and include checksums and signatures. These are all closed, <a href="http://blog.launchpad.net/general/launchpad-is-now-open-source">except for Launchpad</a>, so this involves more advocacy than coding, although maybe <a href="http://code.google.com/p/metalink-library/">Metalink Library for PHP and Python (metalink-library)</a> could be used. <a href="http://sourceforge.net/tracker/index.php?func=detail&amp;aid=1687501&amp;group_id=1&amp;atid=350001">SourceForge bug</a>.<br><p><br></p><p><b>Native Firefox support.&nbsp;</b></p><p><i>Bounty: $500 <br></i></p><p><i>Importance</i>: <span style="color: rgb(255, 0, 0);">High. </span><b><br></b></p><p><i>Difficulty:</i> Hard.&nbsp;</p><p><i>Skills:</i> C++ coding.</p><p><i>Mentor</i>: Ed Lee (Mozilla) <br></p><p><i>Bonus:</i> Familiarity with Mozilla codebase.<br></p><i>Details:</i> (This project was for <a href="http://wiki.mozilla.org/Community:SummerOfCode08#Mozilla_Platform">Mozilla GSoC 2008</a>,
was accepted, but the student chose another organization). Firefox already
handles XML &amp; checksums so no added dependencies. The goal would
be: Single source (ie no multi-source) downloads, checksum
verification, and adding multiple files to the download queue.&nbsp; See <a href="https://developer.mozilla.org/en/Download_Manager_improvements_in_Firefox_3">https://developer.mozilla.org/en/Download_Manager_improvements_in_Firefox_3</a><p><br></p><p><b>Browser Based Metalink Download Client</b></p><p><i>Also see: <a href="http://en.opensuse.org/Summer_of_Code_2009#Integrate_a_download_manager_applet_into_software.opensuse.org">openSUSE GSOC idea</a><br></i></p><p><i>Difficulty</i>: Medium</p><p><i>Skills</i>: Java, some Python coding<span style="color: rgb(255, 0, 0);"></span></p><p><i>Mentor</i>: Neil McNab (Appupdater / Metalink Checker author)</p><p><span style="color: rgb(255, 0, 0);">Progress:</span><span style="color: rgb(255, 0, 0);"> <a href="http://www.nabber.org/projects/dlapplet/">DLApplet</a>
(Java) has been integrated with Metalink Checker using Jython 2.5 RC 3.&nbsp; It should support all features that Metalink Checker does, including multi-threaded download
and checksum support.&nbsp; It has been tested with Firefox 3.0.x and
IE 8.&nbsp; It is currently very memory intensive (around 80 MB) and a large download for a Java applet (almost 7 MB).&nbsp; This can probably be improved by migrating the Python code to Java since this is likely due to the extra Jython classes.&nbsp; Jython doesn't seem to adapt to applets very well.&nbsp; Maybe adapting Phex (www.phex.org) or JDownloader (http://jdownloader.org/) is a better approach now.<br></span></p>Details:
The
idea is to create a "clientless" way to download Metalink files.&nbsp;
This way anyone with a browser with Java enabled can use and experience
Metalinks without having to install a client that supports it.&nbsp; It does
not need to be a full featured client, probably only needs to be able
to handle one metalink at a time, and has a minimal UI.&nbsp; Can probably
leverage reuse of existing Java or Python metalink code (Metalink
Checker).<br><font size="1">Older Notes: 1. Debian had a GSOC project which is similar, a <a href="http://code.google.com/soc/2008/debian/appinfo.html?csaid=91E036962BB853DC">Javascript Jigdo client</a>. Presumably, it could be adapted to use .metalinks, but it has major limitations.&nbsp; Source code is available <a href="http://code.google.com/p/google-summer-of-code-2008-debian/downloads/detail?name=Dustin_Rayner.tar.gz&amp;can=2&amp;q=">here</a>.&nbsp;
First, it only works with Firefox right now.&nbsp; Second, because of
limitations of javascript you can't grab files from a different domain
anyway, limiting its usefulness for metalinks.</font><font size="1"><span style="color: rgb(0, 0, 0);"> 2. <a href="http://www.nabber.org/projects/dlapplet/">DLApplet</a>
(Java) has been added to the metalinks repository on sourceforge.&nbsp; It is a proof of concept and only
supports basic downloads right now <a href="../web/metalink-support-levels">(Metalink Lite)</a>, it needs multi-threaded download
and checksum support.&nbsp; It has been tested with Firefox 3.0.x and
IE 7.&nbsp; Maybe
try adding JSpeedStreamer as a backend.</span></font><br><p><br></p><p><b>Native wget support.</b></p><p><i>Bounty: $100 <br></i></p><p><i>Importance</i>: <span style="color: rgb(255, 0, 0);">High.&nbsp; </span><b><br></b></p><p><i>Difficulty:</i> Hard.</p><p><i>Skills:</i> C coding.&nbsp;</p><p><i>Details:</i>
Metalink support is planned in a future version of wget, but it could
be added earlier for single source (ie not multi-source) downloads,
with hopefully the ability to failover to other URLs if a mirror goes
down. Co-ordinate with Micah Cowan (wget maintainer) on a patch.</p><p><a href="http://www.gnu.org/software/soc-projects/ideas.html#wget">wget GSoC list</a>.<br></p><p><br></p><p><b>FlashGot support (Firefox Addon).</b><br></p><p><i>Importance</i>: <span style="color: rgb(255, 0, 0);">High. </span><b><br></b></p><p><i>Difficulty:</i> Medium? <br></p><p><i>Skills:</i> Javascript coding.<br></p><p><i>Details:</i> FlashGot is a Firefox Addon that interfaces with external download managers.<br></p>
<p>
</p><p><br></p><p><b>Packaging for Linux Distributions!</b></p><p><i>Importance</i>: <span style="color: rgb(255, 0, 0);">High. If apps supporting Metalink exist, but people can't use them...</span> <br></p><p>Details:
Most apps could use packaging so people can easily use them. aria2
&amp; KGet are heavily packaged. GGet, Metalink tools, Metalink Editor,
Metalink Checker, metalink-library, libmetalink are not packaged as much.<br></p><p>&nbsp;</p><b>Anything
that makes it easier for distributions/projects to automate Metalink
creation, like Apache or Drupal modules or plugins.</b><p><i>Difficulty:</i> Easy to Medium.</p><p><i>Skills:</i> Depends on project.</p><p><i>Details</i>: <a href="http://groups.drupal.org/node/10074">Drupal proposal</a>: <a href="http://lists.drupal.org/archives/development/2007-03/msg00011.html">posts</a>, <a href="http://groups.drupal.org/node/3647">blogs</a>, <a href="http://lists.drupal.org/archives/development/2008-03/threads.html">new thread</a>. Peter Poeml has added metalink creation to <a href="http://mirrorbrain.org/">MirrorBrain</a>, a popular download redirector! Matt Domsch added it to Fedora's MirrorManager.<br></p><p>&nbsp;</p><p><b>Custom solutions for specific projects like Debian, CentOS, Eclipse, VLC, etc. </b><br></p><p><i>Difficulty:</i> Easy to Medium.</p><i>
Skills:</i> Depends on project.<p><i>Details:</i> We'd expect you to do this for multiple projects (5-8), as each will be a small amount of work<br></p><p>&nbsp;</p><p><b>Native <a href="http://axel.alioth.debian.org/">axel</a> (download accelerator) support.&nbsp;</b></p><p><i>Difficulty:</i> Easy to Medium.&nbsp;</p><p><i>Skills:</i> C coding.&nbsp;</p><p>Bounty: $50 <br></p><p><span style="color: rgb(255, 0, 0);">Progress:
Tatsuhiro has released libmetalink, a C Metalink Parser. But this will
also require some axel specific code. Philipp Hagemeister,</span><b style="color: rgb(255, 0, 0);"> </b><span style="color: rgb(255, 0, 0);"> who works on Axel plans to do this.</span> <br></p><p><i>Details:</i> Metalink support might require adding XML &amp; checksum library dependency.</p><br><p><b>High Definition video downloads made faster/error free with Metalinks</b></p><p><i>Difficulty:</i> Medium to Hard.</p><p><i>Skills:</i> JSpeedStreamer written in Java, Metalink Checker in Python. <br></p><p><i>Mentor</i>: Neil McNab (Appupdater / Metalink Checker author)</p><p>Bounty: $200 </p><p><i>Details:</i> Could integrate with <a href="http://code.google.com/p/jspeedstreamer/">JSpeedStreamer</a> or use <a href="http://metalinks.svn.sourceforge.net/viewvc/metalinks/checker/metalink.py?view=log">Metalink Checker</a>.</p><div style="padding: 0pt 3em 1.2em 0pt;">
 <p>&nbsp; "JSpeedStreamer: Multi threaded HTTP proxy to speed up streaming media downloads over HTTP, no more 'Buffering.'</p><p>JSpeedStreamer
is a proxy to speed up streaming media over HTTP by using multiple
parallel threads for a single download. It differs from a download
manager in that it delivers the data in order so that the resulting
stream can be played through MPlayer, VLC or any other media player
that can stream over HTTP. </p><p>&nbsp; JSpeedStreamer receives a HTTP
request and then divides up that request into segments, each segment is
assigned to a downloading thread and is downloaded using the HTTP Range
header. The threads download their data into a circular buffer and the
data is delivered to the proxy client - without it knowing that there
are multiple threads downloading its request."</p><p>&nbsp;
Metalink Checker: "It wouldn't be too difficult to pipe the output from
metalink checker to VLC and see what happens. &nbsp;Of course it will only
work if you download the pieces in order (metalink checker generally
does) so Bittorrent sources might be out."&nbsp; This also might require
using smaller chunk sizes than the default.<br> </p></div><b>Integration with <a href="http://wiki.osuosl.org/display/Bouncer/Home">Bouncer</a> which serves up files for Mozilla &amp; Gentoo</b><p><i>Difficulty:</i> Medium to Hard.</p><p><i>Skills: </i>PHP&nbsp;</p><p><span style="color: rgb(255, 0, 0);">Progress?: Bram submitted a patch which has not been merged yet.</span>&nbsp;</p><p><i>Details:</i>&nbsp; "Bouncer is a database driven mirror management app that has three main
components - a bounce script, a sentry script to check mirrors and
files for integrity and a set of web-based administration tools."</p><p>&nbsp; <a href="http://wiki.mozilla.org/Bouncer">Bouncer</a>
already has a database filled with information: hash, urls,
preferences, etc. However, the bouncer project is trying to keep it's
mirrors in shape by using a spider and checking the downloads against
the real files.</p>
<p>By serving up metalinks, you can keep the work of the spider down and give the users more security.</p><p>&nbsp;</p><p><b>Integration with Arch Linux's <a href="http://www.archlinux.org/pacman/">Pacman</a> updater</b></p><p><i>Difficulty:</i> Medium to Hard.</p><p><i>Skills:</i> C coding.</p><p><i>Mentor</i>: Tatsuhiro Tsujikawa (aria2 author)<i> <br></i></p><p><i>Details:</i> Arch founder Judd Vinet provided an <a href="http://bbs.archlinux.org/viewtopic.php?id=25611">early Metalink script</a> on their forums. A good start for using aria2 can be at <a href="http://wiki.archlinux.org/index.php/Faster_Pacman_Downloads#Aria2_Mirror_Script">Faster Pacman Downloads</a> and <a href="http://wiki.archlinux.org/index.php/Improve_Pacman_Performance#Using_aria2">Improve Pacman Performance</a>. Mandriva already does something similar.<br></p><p><br></p><p><b>BitTorrent support for Metalink Checker<br></b></p><p><i>Difficulty:</i> Medium to Hard.</p><p><i>Skills:</i> Python coding.</p><p><i>Mentor</i>: Neil McNab (Appupdater / Metalink Checker author)</p><p><i>Bounty: $200&nbsp; </i><br></p><p><i>Details:</i>
Metalink Checker currently supports only HTTP and FTP downloads.&nbsp; We
should be able to reuse code from other Python based Bittorrent clients
and add support to Metalink Checker.&nbsp; <a href="http://bittornado.com/">BitTornado</a> looks like the best Python option out there.&nbsp; Note that this would then enable Bittorrent support in GGet as well.<br></p>
<p>&nbsp;</p><p><b>Integration with <a href="http://wiki.freebsd.org/Metalink">FreeBSD ports infrastructure</a></b></p><p><i>Difficulty:</i> Hard.</p><p><i>Contact:</i> Unknown. Contact appropriate maintainers/mailing list to see if this is a possibility.<br></p><p><i>Details:</i> "Metalink is a great concept which might be added to
the ports infrastructure. Metalink files can be preprocessed in order
to retain big mirror lists in bsd.sites.mk. Or an XML guru can convert
bsd.sites.mk to an XML version and include it into metalinks in some
way. Stub metalinks can be easily created for each port with a simple
script. <span></span><span></span></p><p>At this time only <a href="http://www.freshports.org/www/aria2/">www/aria2</a>
has some Metalink support. Aria2 has a few dependencies, but it's
completely unnecessary to cram it into the base system. FETCH_DEPENDS
would work very nice. <span></span><span></span></p>Metalink
support can be implemented simultaneously with P2P support, which is
long overdue."<br><p><br></p><p><b>Metalink integration with Proxy/Cache</b></p><p><span style="color: rgb(255, 0, 0);">Progress: Could be done as a plugin like </span><a style="color: rgb(255, 0, 0);" href="http://fedora.co.in/intelligentmirror">IntelligentMirror</a><span style="color: rgb(255, 0, 0);"> for squid.</span><br></p><p>Bounty: $50<br></p><p>Importance: <span style="color: rgb(255, 0, 0);">High.</span></p><p>Difficulty: ?</p><p>Details:
A proxy could already have files in its cache that are listed in a
metalink but they wouldn't be recognized if a different URL is used.<br></p>&nbsp;<p><b>A Metalink download system similar to the BitTorrent client / server architecture</b></p><p><i>Difficulty:</i> Ambitious and extremely hard. :)<br></p><p><i>Skills:</i> Up to you.</p><p><span style="font-family: arial,sans-serif;"><i>Details</i>: See </span><font style="font-family: arial,sans-serif;" face="Courier, Monospaced"><a href="../browse_thread/thread/2fc61ddf7c32e62/df333842edba9f4f?hl=en">Ad-Hoc Metalink Swarms?</a>,</font> <a href="../browse_thread/thread/d49035242333c0f/7352b5a7dfe04a91?hl=en">Mirror URIs &amp; MetaMirror Servers</a></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p style="text-align: center; color: rgb(255, 0, 0);">COMPLETED!</p><p>&nbsp;</p><p><b>Chunk checksum verification in DownThemAll! (Firefox Addon).<br></b></p><p><i>Importance</i>:
 <span style="color: rgb(255, 0, 0);">High. </span><b><br></b></p><p><i>Difficulty:</i>
 Medium? <br></p><p><i>Skills:</i> Javascript coding.<br></p><p><i>Bounty:
 $50 <br></i></p><p><i>Details:</i> DTA does full file verification 
right now. We just need it to use the chunk checksums to repair any 
errors. <a href="http://bugs.code.downthemall.net/trac/ticket/413#comment:4">Nils 
Maier gives details on adding support for chunk checksums to DTA</a>.<br></p><p>Complete: Included in DTA 2.0<br></p><p><br></p><p><span style="color: rgb(255, 0, 0);">Complete: Included in KDE 4.4.</span><br></p><p><b>KGet: work on Metalink improvements and integrations with rest of
KDE (Nepomuk, Kgpg)</b></p><p>Difficulty: Medium</p><p>Skills: C++
coding</p><p>Details:Add
support for <a href="https://bugs.kde.org/show_bug.cgi?id=158816">download
 repair</a>, integration&nbsp;of BitTorrent/FTP/HTTP
multisource downloads, pass <a href="http://bugs.kde.org/show_bug.cgi?id=61397">digital signatures in
Metalinks to KGpg</a>,
let <a href="https://bugs.kde.org/show_bug.cgi?id=158819">Nepomuk
acquire metadata for semantic desktop</a>. <a href="http://techbase.kde.org/index.php?title=Projects/Summer_of_Code/2009/Ideas#KGet">KGet
 GSoC ideas list.</a></p><b><span style="color: rgb(255, 0, 0);">Progress:
 </span><a style="color: rgb(255, 0, 0);" href="http://socghop.appspot.com/student_project/show/google/gsoc2009/kde/t124022560899">Accepted
 for GSOC 09!</a></b><p><br></p><p> </p><p><span style="color: rgb(255, 0, 0);">Complete: Check out Appupdater 1.0!</span><i>&nbsp;&nbsp;</i></p><p><b>Design and create a friendly, easier to use GUI for <a href="http://www.nabber.org/projects/appupdater/">Appupdater</a>, which provides advanced functionality to Windows, similar to apt-get or yum on Linux.</b></p><p><i>Difficulty:</i> Easy</p><p><i>Skills:</i> Python coding, familiarity with UI/design issues.</p><p><i>Mentor</i>: Neil McNab (Appupdater / Metalink Checker author)<br></p><p><i>Details:</i> <span style="color: rgb(255, 0, 0);"></span>Get ideas from the better GUI package managers/updaters on Linux.<br></p><p>&nbsp;</p><p style="color: rgb(255, 0, 0);">Complete: Neil has added .jigdo -&gt; .metalink converter/downloader to Metalink Checker.&nbsp; </p><p><b><a href="http://atterer.net/jigdo/">Jigdo</a> with .metalinks and Metalink downloader.</b></p><p><i>Difficulty:</i> Easy.</p><p><i>Skills:</i> Bash scripting for Jigdo, C++ for aria2 or other (if needed).</p><p><i>Mentor</i>: Tatsuhiro Tsujikawa (aria2 author)<br></p><p><br></p><p style="color: rgb(255, 0, 0);">Complete: <a href="http://live.gnome.org/GGet">GGet uses Metalink Checker for metalink downloads!</a></p><p><b>GNOME/GTK GUI for <a href="http://metalinks.svn.sourceforge.net/viewvc/metalinks/checker/metalink.py?view=log">Metalink Checker</a> / Download Manager integrated into the GNOME Desktop</b><br></p><p><i>Difficulty:</i> Medium (<span style="color: rgb(255, 0, 0);">&nbsp;<a href="http://code.google.com/soc/2008/gnome/appinfo.html?csaid=B37EAC51140DD2B4">Accepted for GNOME GSOC!</a> </span>)<br></p><p><i>Skills:</i> Python coding, familiarity w/ UI/design issues</p><p><i>Mentor</i>: Neil McNab (Appupdater / Metalink Checker author)</p><p><i>Details:</i> Implement the features of a modern GUI download manager. Metalink Checker is written in Python and can be used as a library.</p><p><br></p><p style="margin: 0px;"><b>Native curl support.</b></p><p style="margin: 0px;"><i><span style="color: rgb(255, 0, 0);">In progress: COMPLETE - <a href="http://mulk.sourceforge.net/">mulk</a>, based on libcurl, supports metalink.</span></i></p><p style="margin: 0px;"><i><span style="color: rgb(255, 0, 0);">Tatsuhiro has failover working in curl but it wasn't included upstream. <a href="http://curl.haxx.se/mail/archive-2008-12/0041.html">Patch and discussion</a>.</span><br></i></p><p style="margin: 0px;"><i>Bounty: $500 (<a href="http://daniel.haxx.se/blog/2008/11/09/metalink-in-curl-bounty/">$200 from cURL Project</a>, $300 from Metalink)<br></i></p><p style="margin: 0px;"><i>Importance</i>:&nbsp;<span style="color: rgb(255, 0, 0);">HIGHEST!</span><b><br></b></p><p style="margin: 0px;"><i>Difficulty:</i>&nbsp;Hard?</p><p style="margin: 0px;"><i>Skills:</i>&nbsp;C coding.&nbsp;</p><p style="margin: 0px;"><i>Details:</i>&nbsp;<a href="http://daniel.haxx.se/blog/2008/04/08/no-metalink-in-libcurl/">Daniel Stenberg, curl author, writes</a>:</p><p style="margin: 0px;"><i>"A
metalink file transfer library could be made as a layer on top of
libcurl, and I think that is the only logical and sensible way.</i></p><p style="margin: 0px;">Adding metalink support to the&nbsp;<a href="http://curl.haxx.se/">curl</a>&nbsp;tool however, seems like a good idea to me?"</p><p style="margin: 0px;"><i>Requirements</i>: <b>(1)</b> Single source (ie not multi-source) downloads from a single URL at a time. <b>(2)</b> Failover to other URLs listed in a Metalink if the current URL is unavailable.&nbsp;</p><p style="margin: 0px;"><b>(3)</b> Use chunk checksums and full file checksums so downloads retain integrity.&nbsp;<b>(4)</b> Code to curl's coding standards for quality and formatting so it can be<span style="border-collapse: collapse; white-space: pre-wrap;"> incorporated into the curl sources.</span></p><p>&nbsp;</p><p style="color: rgb(255, 0, 0);"><b>Complete!:</b> MirrorManager now supports Metalink, added by Matt Domsch. </p><p><b>Integrate Metalink generation into Fedora's <a href="https://hosted.fedoraproject.org/mirrormanager">MirrorManager</a></b><br>
</p><p><i>Difficulty:</i> Medium</p><p><i>Skills:</i> Python coding</p><p><i>Details: </i>Coordinate with Matt Domsch, MirrorManager's maintainer. Discussion on fedora-devel &amp; <a href="http://www.redhat.com/mailman/listinfo/fedora-infrastructure-list" rel="nofollow">fedora-infrastructure</a>.</p><p><br></p><p><font color="#ff0000">Complete: OpenOffice.org serves Metalinks now.</font></p><p><i>Details:</i>&nbsp;In the beginning of 2010, OpenOffice.org migrated their download infrastructure from <a href="http://wiki.osuosl.org/display/Bouncer/Home">Bouncer</a> to <a href="http://mirrorbrain.org/">MirrorBrain</a>, and solved the issue this way.</p><wbr>